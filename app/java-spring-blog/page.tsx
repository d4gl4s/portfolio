import ProjectTitle from "../components/ProjectTitle"
import ProjectDescription from "../components/ProjectDescription"
import Image from "next/image"

import screenshot1 from "@/public/java-blog/image.png"
import { Metadata } from "next"

export const metadata: Metadata = {
  title: "Java Spring Blog | Daglas Aitsen",
  description: "This is a simple hobby blog post application built using Java Spring Boot for the backend, PostgreSQL for the database, and React for the frontend.",
}
const Page = () => {
  return (
    <main>
      <section className="w-[90%] max-w-[600px] xl:w-[50%] xl:max-w-[1000px] 2xl:w-[37%] m-auto mb-64">
        <ProjectTitle name="Hosting a Java Spring blog on AWS" authors="Daglas Aitsen" year={2023} website="https://clarity-ten.vercel.app/" github="https://github.com/d4gl4s/clarity"></ProjectTitle>
        <ProjectDescription
          idea={true}
          problem="The main aim of this project was to try out hosting on AWS. The second thing I wanted to explore was how storing, retrieving, and displaying ordered component-based objects would work in the case of a relational database. To test both of these aspects, I decided to build a simple blog MVC application that retrieves blog posts from the database and displays them on the web."
          solution=""
          stack={["Java Spring Boot", "PostgreSQL", "React", "Typescript", "Next.js", "Tailwind CSS", "AWS"]}
        />
        <h1 className=" font-bold text-[1.15em] mb-4">How does it work?</h1>
        <p className=" mb-8">
          An important requirement of the application was that the order of blog post body components should remain fixed and behave differently based on component type. The blog post body is
          separated into different components, each of which has a different type: heading1, heading2, link, paragraph, reference, and so on. This allows each component to be differentiated from
          others and styled or functionalized accordingly in React. Components are stored in the database as blocks. Each component, along with its type, is stored in its corresponding table. The
          table that stores all the posts simply has a list of all the components of the post and maintains them in a fixed order that can be easily changed if needed.
        </p>
        <p className="mb-8">
          Below is a picture of how post body components can be styled differently based on their component type. <span className="font-bold">Note that the article below is generated by AI!</span> The
          blog post starts with its category, which is followed by the post title and an introductory paragraph. The next component is a post heading, followed by another paragraph that has two
          components nested inside it: a hyperlink and a reference. These components function differently than the rest, opening a link and scrolling down the page to the full reference respectively.
        </p>
        <Image className=" rounded-[10px] overflow-hidden mb-8 " alt="form" src={screenshot1} />
        <h1 className=" font-bold text-[1.15em] mb-4 mt-20">Check Out The Project</h1>
        <p className="text-stone-700 text-[0.95em] font-medium ">
          If you are interested in exploring the project firsthand, you can visit the hosted web application{" "}
          <a className="underline text-emerald-500" href="https://clarity-ten.vercel.app/" target="_blank">
            here
          </a>{" "}
          or by checking out the{" "}
          <a className="underline text-emerald-500" href="https://github.com/d4gl4s/clarity" target="_blank">
            GitHub page
          </a>
        </p>
      </section>
    </main>
  )
}

export default Page
